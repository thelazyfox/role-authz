h1. RoleAuthz - Simple role-based authorization


.h2 Defining roles:

<pre><code>
class Application < Merb::Controller
  role :name do |operator, target|
    # return true or false, depending on
    # whether or not this operator/target 
    # combination can have this role
  end
  # Examples:
  role :admin do |operator, target|
    operator.respond_to?(:admin) && operator.admin
  end
  role :owner do |operator, target|
    target.respond_to?(:owner) && target.owner == operator
  end
end
</code></pre>

h2. Permissions

For resources:

<pre><code>
class Posts < Application
  authorize Post do
    for_role(:admin).allow(:all)
    for_role(:owner).allow(:all)
    for_role(:guest).allow(:index, :show)
  end
end
</code></pre>


For controllers:

<pre><code>
class NotAResourceController < Application
  authorize self do
    for_role(:guest).allow(:foo)
  end
  # foo is just an action
end
</code></pre>

Global

<pre><code>
class Application < Merb::Controller
  # your role definitions
  authorize self do
    for_role(:admin).allow(:all)
  end
end
</code></pre>

h2. Operators (user classes)

Operator classes must call authorizable! somewhere. For example:

<pre><code>
class User
  include DataMapper::Resource
  authorizable!
  
  property :id, Serial
  property :login, String
end
</code></pre>

